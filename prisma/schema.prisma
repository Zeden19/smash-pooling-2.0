generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model User {
  id             String  @id
  startggId      Int     @unique
  gamertag       String
  slug           String
  email          String
  profilePicture String? @db.VarChar(1000)

  sessions          Session[]
  carpoolsDriving   Carpool[] @relation(name: "CarpoolDriver") // Many To One
  carpoolsAttending Carpool[] @relation(name: "CarpoolAttendee") // Many To Many

  isDriver     Boolean   @default(false)
  fullName     String?
  carInfo      String?
  licencePlate String?
  carSeats     Int?
  phoneNumber  String?
  message      Message[] // Many To One
}

model Carpool {
  id        Int       @id @default(autoincrement())
  driver    User      @relation(fields: [driverId], references: [id], name: "CarpoolDriver") // One to Many
  driverId  String
  attendees User[]    @relation(name: "CarpoolAttendee") // Many To Many
  chatroom  Chatroom? // one to one

  originLat       Decimal
  originLng       Decimal
  originName      String
  destinationLat  Decimal
  destinationLng  Decimal
  destinationName String

  tournamentSlug String
  distance       String
  route          String        @db.VarChar(6000)
  seatsAvailable Int?
  startTime      DateTime?
  status         CarpoolStatus @default(OPEN)
  price          Int           @default(0)
  description    String        @default("") @db.VarChar(500)
}

enum CarpoolStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
}

model Chatroom {
  carpool   Carpool   @relation(fields: [carpoolId], references: [id], onDelete: Cascade) // One to One
  carpoolId Int       @id @unique // From the carpool we can get attendees and driver
  messages  Message[] // many to one
}

model Message {
  id            Int      @id @default(autoincrement())
  user          User?    @relation(fields: [userId], references: [id]) // one to many
  userId        String? // messages can come from "server"
  chatRoom      Chatroom @relation(fields: [chatroomId], references: [carpoolId], onDelete: Cascade) // one to many
  chatroomId    Int
  content       String   @db.VarChar(500)
  serverMessage Boolean  @default(false)
  edited        Boolean  @default(false)
}
